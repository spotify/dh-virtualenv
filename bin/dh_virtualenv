#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2013 Spotify AB

# This file is part of dh-virtualenv.

# dh-virtualenv is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 2 of the
# License, or (at your option) any later version.

# dh-virtualenv is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with dh-virtualenv. If not, see
# <http://www.gnu.org/licenses/>.

import inspect
import logging
import os
import sys


from optparse import OptionParser, SUPPRESS_HELP

# The debpython resides here
sys.path.insert(1, '/usr/share/python/')

from debpython.debhelper import DebHelper
from dh_virtualenv import Deployment

logging.basicConfig(format='%(levelname).1s: %(module)s:%(lineno)d: '
                    '%(message)s')
log = logging.getLogger(__name__)


def main():
    usage = '%prog [options]'
    parser = OptionParser(usage, version='%prog 0.1')
    parser.add_option('-p', '--package', action='append',
                      help='act on the package named PACKAGE')
    parser.add_option('-N', '--no-package', action='append',
                      help='do not act on the specified package')
    parser.add_option('-v', '--verbose', action='store_true',
                      default=False, help='Turn on verbose mode')
    parser.add_option('-s', '--setuptools', action='store_true',
                      default=False, help='Use Setuptools instead of Distribute')
    parser.add_option('--extra-index-url', action='append',
                      help='extra index URL to pass to pip.',
                      default=[])
    parser.add_option('--preinstall', action='append',
                      help=('package to install before processing '
                            'requirements.txt.'),
                      default=[])
    parser.add_option('--pypi-url', help='Base URL of the PyPI server')
    parser.add_option('--python', help='The Python to use')
    parser.add_option('-D', '--sourcedirectory', dest='sourcedirectory',
                      help='The source directory')
    # Ignore user-specified option bunldes
    parser.add_option('-O', help=SUPPRESS_HELP)

    parser.add_option('-a', '--arch', dest="arch", 
                      help=("Act on architecture dependent packages that "
                            "should be built for the build architecture. "
                            "currently ignored"), 
                      action="store_true")

    parser.add_option('-i', '--indep', dest="indep", 
                      help=("Act on all architecture independent packages. "
                            "currently ignored"),
                      action="store_true")

    sys_args_o = [(o[2:] if o.startswith('-O-') else o) for o in sys.argv[1:]]
    options, args = parser.parse_args(sys_args_o + os.environ.get('DH_OPTIONS', '').split())

    verbose = options.verbose or os.environ.get('DH_VERBOSE') == '1'
    if verbose:
        log.setLevel(logging.DEBUG)

    # Older DebHelpers, like the one on Debian Squeeze, expect to be
    # passed the packages keyword argument. Newer (like Ubuntu
    # Precise) expect the whole options to be passed.

    arguments = inspect.getargspec(DebHelper.__init__).args
    if 'packages' in arguments:
        dh = DebHelper(packages=options.package or None)
    else:
        dh = DebHelper(options)
    for package, details in dh.packages.items():
        def _info(msg):
            log.info('{0}: {1}'.format(package, msg))

        _info('Processing package...')
        deploy = Deployment(
            package,
            extra_urls=options.extra_index_url,
            preinstall=options.preinstall,
            pypi_url=options.pypi_url,
            setuptools=options.setuptools,
            python=options.python,
            sourcedirectory=options.sourcedirectory,
            verbose=verbose,
        )

        _info('Creating virtualenv')
        deploy.create_virtualenv()

        deploy.install_dependencies()
        deploy.install_package()
        deploy.fix_shebangs()
        deploy.fix_activate_path()


if __name__ == '__main__':
    sys.exit(main() or 0)
