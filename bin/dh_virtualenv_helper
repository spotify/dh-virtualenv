#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Copyright (c) 2015 Spotify AB

# This file is part of dh-virtualenv.

# dh-virtualenv is free software: you can redistribute it and/or
# modify it under the terms of the GNU General Public License as
# published by the Free Software Foundation, either version 2 of the
# License, or (at your option) any later version.

# dh-virtualenv is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with dh-virtualenv. If not, see
# <http://www.gnu.org/licenses/>.

'''
Generates debian/ directory with boilerplate contents for dh-virtualenv. A
"setup.py 2 debian" of sorts.

Intended to ease or automate dh-virtualenv packaging of typical Python libraries
and tools.

Usage:
    dh_virtualenv_helper setup.py generate

The implementation monkey-patches distutils a bit like setuptools does, to get
hold of information typically declared in the setup script as kwargs to setup().

TODO make it possible to patch debian/ contents when there are custom additions?
TODO changelog from VCS commits?
'''

import datetime
from dateutil import tz
import distutils.core
import os
import re
import sys


# TODO include version of dh-virtualenv?
COMMENT = 'autogenerated by {name}'.format(
    name=os.path.basename(sys.modules['__main__'].__file__))


def _put_file(filename, contents):
    d = os.path.dirname(filename)
    if not os.path.exists(d):
        os.makedirs(d)
    with open(filename, 'w') as f:
        f.write(contents)


def _sanitize_package_name(name):
    return re.sub('[^a-z]+', '-', name.lower()).strip('-')


def _sanitize_package_version(version):
    return '.'.join(re.sub('[^0-9]+', '-', version).strip('-').split('-')[:3])


def _format_datetime(dt):
    # TODO ensure EN locale as in
    # https://www.debian.org/doc/debian-policy/ch-source.html#s-dpkgchangelog
    return dt.strftime('%a, %d %b %Y %H:%M:%S %z')


def generate(**kwargs):
    # Refer to https://docs.python.org/2/distutils/setupscript.html for
    # setup() kwargs.

    # Refer to https://www.debian.org/doc/debian-policy/ch-controlfields.html
    # for mandatory and recommended debian/control fields.

    missing_mandatory_fields = []
    notes = []
    debian = {}

    if 'name' in kwargs:
        debian['Package'] = _sanitize_package_name(kwargs['name'])
        if debian['Package'] != kwargs['name']:
            notes += [(
                'altered name to {} (to be used in debian/control as Package '
                'and Source)').format(debian['Package'])]
        debian['Source'] = debian['Package']
    else:
        missing_mandatory_fields += [(
            'provide name (to be used in debian/control as Package and '
            'Source)')]

    if 'version' in kwargs:
        debian['Version'] = _sanitize_package_version(kwargs['version'])
        if debian['Version'] != kwargs['version']:
            notes += [(
                'altered version to {} (to be used in debian/changelog as '
                'Version)').format(debian['Version'])]
    else:
        missing_mandatory_fields += [(
            'provide version (to be used in debian/changelog as Version)')]

    if 'description' in kwargs:
        debian['Description'] = kwargs['description'].split('\n')[0]
        if debian['Description'] != kwargs['description']:
            notes += [(
                'truncated description to one line (to be used in '
                'debian/control as Description)')]
    else:
        missing_mandatory_fields += [(
            'provide description (to be used in debian/control as Description')]

    debian_maintainer_name = kwargs.get('maintainer') or kwargs.get('author')
    debian_maintainer_email = kwargs.get('maintainer_email') or kwargs.get(
        'author_email')
    if debian_maintainer_name and debian_maintainer_email:
        debian['Maintainer'] = '{} <{}>'.format(
            debian_maintainer_name, debian_maintainer_email)
    else:
        if not debian_maintainer_name:
            missing_mandatory_fields += [(
                'provide at least one of: maintainer, author (to be used in '
                'debian/control as Maintainer name')]
        if not debian_maintainer_email:
            missing_mandatory_fields += [(
                'provide at least one of: maintainer_email, author_email '
                '(to be used in debian/control as Maintainer email)')]

    if missing_mandatory_fields:
        print 'Missing mandatory fields:'
        for message in missing_mandatory_fields:
            print '*', message
        sys.exit(1)

    if notes:
        print 'Note:'
        for message in notes:
            print '*', message

    debian['Standards-Version'] = '3.9.6'
    debian['Architecture'] = 'any'

    _put_file('debian/changelog', '\n'.join([
        '{Package} ({Version}) stable; urgency=medium'.format(**debian),
        '',
        '  * ' + COMMENT,
        '',
        ' -- {email}  {timestamp}'.format(
            email='someone <someone@somewhere.net>',  # FIXME
            timestamp=_format_datetime(datetime.datetime.now(tz.tzlocal()))),
    ]) + '\n')

    _put_file('debian/compat', '9\n')

    source_fields = ['Source', 'Maintainer', 'Standards-Version']
    source_paragraph = ['{}: {}'.format(f, debian[f]) for f in source_fields]
    binary_fields = ['Package', 'Architecture', 'Description']
    binary_paragraph = ['{}: {}'.format(f, debian[f]) for f in binary_fields]
    _put_file('debian/control', '\n'.join(
        ['# ' + COMMENT] +
        [''] +
        source_paragraph +
        [''] +
        binary_paragraph
    ) + '\n')

    _put_file('debian/rules', '\n'.join([
        '#!/usr/bin/make -f',
        '# ' + COMMENT,
        '',
        '%:',
        '\tdh $@ --with python-virtualenv'
    ]) + '\n')


assert sys.argv[2] == 'generate'

distutils.core.setup = generate

execfile(sys.argv[1])
